#pragma once

#include "Core/Core.hpp"
#include "Domain/Entities/AttributeInfo.hpp"

/*
ACC_PUBLIC	0x0001	Declared public; may be accessed from outside its package.
ACC_PRIVATE	0x0002	Declared private; accessible only within the defining class.
ACC_PROTECTED	0x0004	Declared protected; may be accessed within subclasses.
ACC_STATIC	0x0008	Declared static.
ACC_FINAL	0x0010	Declared final; must not be overridden (ยง5.4.5).
ACC_SYNCHRONIZED	0x0020	Declared synchronized; invocation is wrapped by a monitor use.
ACC_BRIDGE	0x0040	A bridge method, generated by the compiler.
ACC_VARARGS	0x0080	Declared with variable number of arguments.
ACC_NATIVE	0x0100	Declared native; implemented in a language other than Java.
ACC_ABSTRACT	0x0400	Declared abstract; no implementation is provided.
ACC_STRICT	0x0800	Declared strictfp; floating-point mode is FP-strict.
ACC_SYNTHETIC	0x1000	Declared synthetic; not present in the source code.
*/

/*
method_info {
	u2             access_flags;
	u2             name_index;
	u2             descriptor_index;
	u2             attributes_count;
	attribute_info attributes[attributes_count];
}
*/
struct MethodInfo {
	u16 access_flags;
	u16 name_index;
	u16 descriptor_index;
	u16 attributes_count;
	AttributeInfo **attributes;
};

MethodInfo *CreateMethodInfo() {
	MethodInfo *methodInfo = (MethodInfo*)malloc(sizeof(MethodInfo));
	return methodInfo;
}

void deleteMethodInfo(MethodInfo *methodInfo) {
	if (methodInfo->attributes != NULL) {
		for (int i = 0; i < methodInfo->attributes_count; i++) {
			deleteAttributeInfo(methodInfo->attributes[i]);
		}
	}
	free(methodInfo);
}
